namespace Store
{
    class Program
    {
        public static void Main()
        {
            //add 5 customers to list
            List<Customer> customers = new List<Customer>()
            {
                new Customer(1, "Paul", "Mccartney", "USA"),
                new Customer(2, "Sam", "Hubbert", "Canada"),
                new Customer(3, "Jao", "Pastel", "Brazil"),
                new Customer(4, "Issac", "Asimov", "USA"),
                new Customer(5, "Erin", "Gunderson", "Germany"),
            };

            //add 15 products to list
            List<Product> products = new List<Product>()
            {
                new Product(11, "USB Battery Pack", 101.99m),
                new Product(12, "Electric Lighter", 12.49m),
                new Product(13, "Headset", 199.99m),
                new Product(14, "Keyboard", 149.99m),
                new Product(15, "Wireless Mouse", 119.99m),
                new Product(16, "Paper Notebook", 15.99m),
                new Product(17, "Black ink Pen", 11.99m),
                new Product(18, "Stainless Steel Cup", 49.99m),
                new Product(19, "USB Charging Cable", 19.99m),
                new Product(20, "Winter Hat", 39.99m),
                new Product(21, "Desk Lamp", 24.99m),
                new Product(22, "Paper Towel Pack", 6.99m),
                new Product(23, "Compressed Air Can", 9.99m),
                new Product(24, "Computer Desk", 599.99m),
                new Product(25, "Office Chair", 399.99m),
            };

            //add 5 orders to list
            List<Order> orders = new List<Order>()
            {
                new Order(101, customers[0].CustomerId, new DateTime(2021, 10, 1)),
                new Order(102, customers[1].CustomerId, new DateTime(2021, 10, 1)),
                new Order(103, customers[2].CustomerId, new DateTime(2023, 3, 1)),
                new Order(104, customers[3].CustomerId, new DateTime(2023, 4, 1)),
                new Order(105, customers[4].CustomerId, new DateTime(2024, 5, 1)),
            };

            //add 3 OrderItem products to eachof 5 Order, total 15 
            for (int i = 0; i < products.Count(); i++)
            {
                if (i < 3)
                { orders[0].OrderItems.Add(new OrderItem(orders[0].OrderId, products[i].ProductId, i, Math.Round(i / 10m, 2) )); }
                else if (i < 6 && i >= 3)
                { orders[1].OrderItems.Add(new OrderItem(orders[1].OrderId, products[i].ProductId, i, Math.Round(i / 10m, 2) )); }
                else if (i < 9 && i >= 6)
                { orders[2].OrderItems.Add(new OrderItem(orders[2].OrderId, products[i].ProductId, i, Math.Round(i / 10m, 2) )); }
                else if (i < 12 && i >= 9)
                { orders[3].OrderItems.Add(new OrderItem(orders[3].OrderId, products[i].ProductId, i, Math.Round(i / 30m, 2) )); }
                else if (i < 15 && i >= 12)
                { orders[4].OrderItems.Add(new OrderItem(orders[4].OrderId, products[i].ProductId, i, Math.Round(i / 30m, 2) )); }
            }

            //queries a-g
            Console.WriteLine("\nA.Display a list of all customers in alphabetical order by last name.");
            customers.OrderBy(cust => cust.LastName).ToList().ForEach(cust => 
            Console.WriteLine($"{cust.LastName}, {cust.FirstName}"));

            Console.WriteLine("\nB.Display a list of all products in order of unit price, from highest to lowest.");
            products.OrderByDescending(prod => prod.UnitPrice).ToList().ForEach(prod => 
            Console.WriteLine($"{prod.ProductId} - {prod.UnitPrice}, {prod.ProductName}"));

            Console.WriteLine("\nC.Display a list of all orders that were shipped in October 2021.");
            string orderItems = "";
            orders.Where(ord => DateTime.Equals(ord.OrderDate, new DateTime(2021, 10, 1))).ToList().ForEach(ord =>
                {
                    ord.OrderItems.ForEach(orderItem => orderItems += orderItem.ProductId.ToString() + " ");
                    Console.WriteLine($"orderId: {ord.OrderId}, date: {ord.OrderDate}, productIds: {orderItems}");
                });

            Console.WriteLine("\nD.Display a list of all orders that were shipped to customers in the USA.");
            orders.Where(ord => customers.Find(cust => cust.CustomerId == ord.CustomerId).Country == "USA")
                .ToList().ForEach(ord =>
                Console.WriteLine($"orderId: {ord.OrderId}, shippedTo: {customers.Find(cust => cust.CustomerId == ord.CustomerId).Country}"));

            Console.WriteLine("\nE.Display a list of all products that were ordered at least once, " +
                "along with the total quantity ordered and the total revenue generated by each product.");
            List<Tuple<int, int, decimal>> orderedProducts = new List<Tuple<int, int, decimal>>();

            orders.ForEach(order => 
            order.OrderItems.ForEach(ordItem =>
            {
                if (ordItem.ProductQuantity > 0)
                {
                    orderedProducts.Add(new Tuple<int, int, decimal>(ordItem.ProductId, ordItem.ProductQuantity, ordItem.Discount));
                }
            }));

            orderedProducts.ForEach(ordProd =>
            {
                decimal price = (products.Find(prod => prod.ProductId == ordProd.Item1).UnitPrice * ordProd.Item2);
                decimal discount = price * ordProd.Item3;
                Console.WriteLine(
                    $"prodId: {ordProd.Item1}, " +
                    $"prodQuantity:{ordProd.Item2}, " +
                    $"revenue: {price - discount}, " +
                    $"discount: {ordProd.Item3}, " +
                    $"priceWithoutDiscount: {price}"
                    );
            });

            Console.WriteLine("\nF.Display a list of the top 5 customers by the total amount of money they have spent, " +
                "along with the number of orders they have placed and the average order amount.");
            List<OrderItem> orderItemsColl = new();
            orders.ForEach(order => order.OrderItems.ForEach(orderItem => orderItemsColl.Add(orderItem)));

            var query = customers
                .Join(orders, customer => customer.CustomerId, order => order.CustomerId, 
                (customer, order) => new { customer, order })
                .Join(orderItemsColl, customer => customer.order.OrderId, orderItem => orderItem.OrderId, 
                (customer, orderItem) => new { customer.customer, customer.order, orderItem })
                .Join(products, customer => customer.orderItem.ProductId, product => product.ProductId,
                (customer, product) => new { customer.customer, customer.order, customer.orderItem, product })
                .GroupBy(customer => customer.customer, customer => customer,
                    (customer, orderProducts) => new
                    {
                        Customer = customer,
                        TotalAmountSpent = orderProducts.Sum(x => (x.orderItem.ProductQuantity * x.product.UnitPrice) * (1 - x.orderItem.Discount)),
                        NumberOfOrders = orderProducts.Select(x => x.order.OrderId).Distinct().Count(),
                        AverageOrderAmount = orderProducts.Sum(x => (x.orderItem.ProductQuantity * x.product.UnitPrice) * (1 - x.orderItem.Discount)) 
                        / orderProducts.Select(x => x.order.OrderId).Distinct().Count(),
                    })
                .OrderByDescending(customer => customer.TotalAmountSpent)
                .Take(5);

            query.ToList().ForEach(customer => 
            { 
                Console.WriteLine(
                    $"customerName: {customer.Customer.FirstName} {customer.Customer.LastName}, " +
                    $"totalSpent:{customer.TotalAmountSpent}, " +
                    $"numberOfOrders:{customer.NumberOfOrders}, " +
                    $"AvgOrderAmount:{customer.AverageOrderAmount}");
            });

            Console.WriteLine("\nG.The most popular product by the number of times it has been ordered.");
            var popProduct = orderItemsColl.GroupBy(ordItem => ordItem.ProductId).Select(prod => new
            { ProductId = prod.Key, TotalQuantity = prod.Sum(ordItem => ordItem.ProductQuantity) })
                .OrderByDescending(SelectProduct => SelectProduct.TotalQuantity).First();
            Console.WriteLine($"prodId: {popProduct.ProductId}, prodQuantity: {popProduct.TotalQuantity}");
        }
    }

    class Customer
    {
        public int CustomerId { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Country { get; set; }

        public Customer(int customerId, string firstName, string lastName, string country)
        {
            CustomerId = customerId;
            FirstName = firstName;
            LastName = lastName;
            Country = country;
        }
    }

    class Product
    {
        public int ProductId { get; set; }
        public string ProductName { get; set; }
        public decimal UnitPrice { get; set; }

        public Product(int productId, string productName, decimal unitPrice)
        {
            ProductId = productId;
            ProductName = productName;
            UnitPrice = unitPrice;
        }
    }

    class Order
    {
        public int OrderId { get; set; }
        public int CustomerId { get; set; }
        public DateTime OrderDate { get; set; }
        public DateTime? ShippedDate { get; set; }
        public decimal OrderPriceTotal { get; set; }
        public List<OrderItem> OrderItems { get; set; }

        public Order(int orderId, int customerId, DateTime orderDate)
        {
            OrderId = orderId;
            CustomerId = customerId;
            OrderDate = orderDate;
            OrderItems = new List<OrderItem>();
        }

        public decimal GetOrderPriceTotal(List<Product> products)
        {
            if (OrderPriceTotal == default && OrderItems.Count != 0)
            {
                OrderItems.ForEach(ordItem =>
                    OrderPriceTotal += 
                    products.Find(prod => prod.ProductId == ordItem.ProductId).UnitPrice * ordItem.ProductQuantity * ordItem.Discount
                );
            }
            return OrderPriceTotal;
        }
    }

    class OrderItem
    {
        public int OrderId { get; set; }
        public int ProductId { get; set; }
        public int ProductQuantity { get; set; }
        public decimal Discount { get; set; }

        public OrderItem (int orderId, int productId, int productQuantity, decimal discount)
        {
            OrderId = orderId;
            ProductId = productId;
            ProductQuantity = productQuantity;
            Discount = discount;
        }
    }
}